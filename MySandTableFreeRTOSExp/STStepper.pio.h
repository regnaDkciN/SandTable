// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// --------- //
// ststepper //
// --------- //

#define ststepper_wrap_target 0
#define ststepper_wrap 2
#define ststepper_pio_version 0

static const uint16_t ststepper_program_instructions[] = {
            //     .wrap_target
    0xa542, //  0: nop                    side 0 [5]
    0x6001, //  1: out    pins, 1         side 0
    0xb542, //  2: nop                    side 1 [5]
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program ststepper_program = {
    .instructions = ststepper_program_instructions,
    .length = 3,
    .origin = -1,
    .pio_version = ststepper_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config ststepper_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + ststepper_wrap_target, offset + ststepper_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}

#include "hardware/clocks.h"
/////////////////////////////////////////////////////////////////////////////////
// STStepper class
//
// Simplifies multiple servo setup and stepping.
/////////////////////////////////////////////////////////////////////////////////
class STStepper
{
public:
    /////////////////////////////////////////////////////////////////////////////
    // Constructor
    //
    // Creates a PIO state machine and gets it ready for use.
    //
    // Arguments:
    //   dirPin  - the GPIO pin number used for setting the servo direction.
    //   stepPin - the GPIO pin number used for stepping the servo.
    //   freq    - the state machine frequency.  Normally 1,000,000.0.
    /////////////////////////////////////////////////////////////////////////////
    STStepper(int dirPin, int stepPin, float freq = 1000000.0)
    {
        pio_claim_free_sm_and_add_program(&ststepper_program, &m_Pio, &m_Sm, &m_Offset);
        Init(dirPin, stepPin, freq);
    } // End Constructor.
    /////////////////////////////////////////////////////////////////////////////
    // Destructor
    /////////////////////////////////////////////////////////////////////////////
    ~STStepper()
    {
        pio_remove_program(m_Pio, &ststepper_program, m_Offset);
    } // End Destructor.
    /////////////////////////////////////////////////////////////////////////////
    // Step()
    //
    // Steps the servo in the specified direction.
    //
    // Arguments:
    //   dir - the direction to step (1 or 0).
    /////////////////////////////////////////////////////////////////////////////
    void Step(uint dir)
    {
        pio_sm_put_blocking(m_Pio, m_Sm, dir);
    } // End Step().
private:
    // We don't want to create a default object, nor do we want to copy one.
    STStepper();
    STStepper(const STStepper &);
    STStepper &operator=(const STStepper &);
    /////////////////////////////////////////////////////////////////////////////
    // Init()
    //
    // Initializes the state machine and starts it running.
    //
    // Arguments:
    //   dirPin  - the GPIO pin number used for setting the servo direction.
    //   stepPin - the GPIO pin number used for stepping the servo.
    //   freq    - the state machine frequency.  Normally 1,000,000.0.
    /////////////////////////////////////////////////////////////////////////////
    void Init(uint dirPin, uint stepPin, float freq)
    {
        // Set up the GPIO pins.
        pio_sm_set_pins_with_mask(m_Pio, m_Sm, 0, (1u << dirPin) | (1u << stepPin));
        pio_sm_set_pindirs_with_mask(m_Pio, m_Sm, ~0u, (1u << dirPin) | (1u << stepPin));
        pio_gpio_init(m_Pio, dirPin);
        pio_gpio_init(m_Pio, stepPin);
        // Configure the state machine.
        pio_sm_config c = ststepper_program_get_default_config(m_Offset);
        sm_config_set_out_pins(&c, dirPin, 1);
        sm_config_set_sideset_pins(&c, stepPin);
        // Shift to right, autopull with threshold 1.
        sm_config_set_out_shift(&c, true, true, 1);
        // Deeper FIFO (8) as we're not doing any RX.
        sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
        // Init the state machine frequency.
        float div = (float)clock_get_hz(clk_sys) / freq;
        sm_config_set_clkdiv(&c, div);
        // Start up the state machine.
        pio_sm_init(m_Pio, m_Sm, m_Offset, &c);
        pio_sm_set_enabled(m_Pio, m_Sm, true);
    } // End Init().
    // Object variables
    PIO  m_Pio;         // PIO object number.
    uint m_Sm;          // State machine number.
    uint m_Offset;      // State machine offset.
}; // End STStepper class.

#endif

